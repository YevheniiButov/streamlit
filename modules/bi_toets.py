# modules/bi_toets.py

import streamlit as st

texts = {
    "en": {
        "title": "üß™ BI-toets Preparation",
        "question_header": "Question {q_num} of {total}",
        "choose_answer": "Choose the correct answer:",
        "confirm_button": "Confirm",
        "correct_feedback": "‚úÖ Correct!",
        "incorrect_feedback": "‚ùå Incorrect.",
        "explanation_info": "‚ÑπÔ∏è Explanation:",
        "your_answer_label": "**Your answer:**",
        "next_button": "Next Question",
        "result_button": "View Result",
        "final_score_message": "You answered {score} out of {total} correctly!",
        "restart_button": "üîÅ Start Over"
    },
    "ru": {
        "title": "üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ BI-toets",
        "question_header": "–í–æ–ø—Ä–æ—Å {q_num} –∏–∑ {total}",
        "choose_answer": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
        "confirm_button": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        "correct_feedback": "‚úÖ –í–µ—Ä–Ω–æ!",
        "incorrect_feedback": "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.",
        "explanation_info": "‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ:",
        "your_answer_label": "**–í–∞—à –æ—Ç–≤–µ—Ç:**",
        "next_button": "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
        "result_button": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "final_score_message": "–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {total}!",
        "restart_button": "üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
    },
    "nl": {
        "title": "üß™ BI-toets voorbereiding",
        "question_header": "Vraag {q_num} van {total}",
        "choose_answer": "Kies het juiste antwoord:",
        "confirm_button": "Bevestigen",
        "correct_feedback": "‚úÖ Correct!",
        "incorrect_feedback": "‚ùå Onjuist.",
        "explanation_info": "‚ÑπÔ∏è Uitleg:",
        "your_answer_label": "**Je antwoord:**",
        "next_button": "Volgende vraag",
        "result_button": "Bekijk resultaat",
        "final_score_message": "Je hebt {score} van {total} goed beantwoord!",
        "restart_button": "üîÅ Opnieuw beginnen"
    }
}

questions = [
    {
        "question": "Wat is de aanbevolen manier om instrumenten te steriliseren?",
        "options": ["In water met zeep", "Met alcohol", "Met een autoclaaf"],
        "answer": "Met een autoclaaf",
        "explanation": "Een autoclaaf doodt bacteri√´n, virussen en schimmels onder hoge druk en temperatuur."
    },
    {
        "question": "Wat hoort bij goede handhygi√´ne?",
        "options": ["Handschoenen hergebruiken", "Sieraden dragen", "Handen wassen voor en na contact"],
        "answer": "Handen wassen voor en na contact",
        "explanation": "Handen wassen voorkomt verspreiding van infecties."
    },
    {
        "question": "Wat betekent informed consent?",
        "options": ["De pati√´nt beslist na uitleg", "De arts beslist", "De verzekering beslist"],
        "answer": "De pati√´nt beslist na uitleg",
        "explanation": "De pati√´nt moet weten wat er gaat gebeuren en akkoord gaan."
    },
    {
        "question": "Wat is een mogelijk gevolg van onvoldoende sterilisatie?",
        "options": ["Verlies van instrumenten", "Verspreiding van infecties", "Geen effect"],
        "answer": "Verspreiding van infecties",
        "explanation": "Onvoldoende sterilisatie verhoogt het risico op kruisbesmetting."
    },
    {
        "question": "Wat is de functie van een medisch dossier?",
        "options": ["Voor administratie", "Voor onderzoek", "Voor communicatie en continu√Øteit van zorg"],
        "answer": "Voor communicatie en continu√Øteit van zorg",
        "explanation": "Een dossier helpt zorgverleners samen te werken en het verloop te volgen."
    }
]

def initialize_state():
    if "bi_q_index" not in st.session_state:
        st.session_state.bi_q_index = 0
    if "bi_score" not in st.session_state:
        st.session_state.bi_score = 0
    if "bi_confirmed" not in st.session_state:
        st.session_state.bi_confirmed = False
    if "bi_done" not in st.session_state:
        st.session_state.bi_done = False
    for i in range(len(questions)):
        if f"selected_{i}" not in st.session_state:
            st.session_state[f"selected_{i}"] = None

def render(lang="en"):
    t = texts.get(lang, texts["en"])

    st.title(t["title"])

    initialize_state()

    if st.session_state.bi_done:
        st.success(t["final_score_message"].format(score=st.session_state.bi_score, total=len(questions)))

        if st.session_state.bi_score == len(questions):
             st.balloons()
        elif st.session_state.bi_score >= len(questions) // 2: 
             pass 

        if st.button(t["restart_button"]):
            st.session_state.bi_q_index = 0
            st.session_state.bi_score = 0
            st.session_state.bi_confirmed = False
            st.session_state.bi_done = False
            for i in range(len(questions)):
                st.session_state[f"selected_{i}"] = None
            st.rerun()
        return

    current_index = st.session_state.bi_q_index
    q = questions[current_index]

    st.metric(label="–ü—Ä–æ–≥—Ä–µ—Å—Å", value=f"{current_index + 1}/{len(questions)}")
    st.progress((current_index + 1) / len(questions))
    st.divider()


    st.markdown(f"### {t['question_header'].format(q_num=current_index + 1, total=len(questions))}")
    st.write(f"**{q['question']}**")

    radio_key = f"q_{current_index}"

    if not st.session_state.bi_confirmed:
        selected_option = st.radio(
            t["choose_answer"],
            q['options'],
            key=radio_key,
            index=q['options'].index(st.session_state[f"selected_{current_index}"]) if st.session_state[f"selected_{current_index}"] in q['options'] else None
        )
        st.session_state[f"selected_{current_index}"] = selected_option

        if st.button(t["confirm_button"]):
            if selected_option is None:
                 # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                warning_texts = {
                    "en": "Please select an answer.",
                    "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç.",
                    "nl": "Selecteer alstublieft een antwoord.",
                    "uk": "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
                    "es": "Por favor, seleccione una respuesta.",
                    "tr": "L√ºtfen bir cevap se√ßin.",
                    "fa": "ŸÑÿ∑ŸÅÿß €å⁄© Ÿæÿßÿ≥ÿÆ ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ.",
                    "pt": "Por favor, selecione uma resposta."
                }
                st.warning(warning_texts.get(lang, warning_texts["en"]))
            else:
                if selected_option == q['answer']:
                    st.session_state.bi_score += 1
                st.session_state.bi_confirmed = True
                st.rerun()

    else:
        st.markdown(f"{t['your_answer_label']} {st.session_state[f'selected_{current_index}']}")

        if st.session_state[f"selected_{current_index}"] == q['answer']:
            st.success(t["correct_feedback"])
        else:
            st.error(t["incorrect_feedback"])

    
        if q.get("explanation"):
            with st.expander(t["explanation_info"]):
                 st.write(q['explanation'])


        if current_index + 1 < len(questions):
            if st.button(t["next_button"]):
                st.session_state.bi_q_index += 1
                st.session_state.bi_confirmed = False
                st.rerun()
        else:
            if st.button(t["result_button"]):
                st.session_state.bi_done = True
                st.rerun()